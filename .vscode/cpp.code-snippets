{
	// Place your cp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"for": {
		"scope": "cpp",
		"prefix": "for",
		"body": [
			"for(int ${1:i} = ${2:0}; $1 < ${3:n}; ++$1) {",
			"    $0",
			"}"
		],
		"description": "for loop"
	},
	"rfor": {
		"scope": "cpp",
		"prefix": "rfor",
		"body": [
			"for(int ${1:i} = ${2:n - 1}; $1 >= ${3:0}; --$1) {",
			"    $0",
			"}"
		],
		"description": "reversed for loop"
	},
    "ModInt": {
		"scope": "cpp",
        "prefix": "ModInt",
        "body": [
            "\r",
            "template <int MOD>\r",
            "struct ModInt {\r",
            "    int value;\r",
            "\r",
            "    ModInt(long long v = 0) {\r",
            "        value = v % MOD;\r",
            "        if (value < 0) value += MOD;\r",
            "    }\r",
            "\r",
            "    ModInt &operator+=(ModInt const &b) {\r",
            "        value += b.value;\r",
            "        if (value >= MOD) value -= MOD;\r",
            "        return *this;\r",
            "    }\r",
            "\r",
            "    ModInt &operator-=(ModInt const &b) {\r",
            "        value -= b.value;\r",
            "        if (value < 0) value += MOD;\r",
            "        return *this;\r",
            "    }\r",
            "\r",
            "    ModInt &operator*=(ModInt const &b) {\r",
            "        value = (long long)value * b.value % MOD;\r",
            "        return *this;\r",
            "    }\r",
            "\r",
            "    ModInt &operator/=(const ModInt &b) { return *this *= b.inv(); }\r",
            "\r",
            "    friend ModInt operator+(ModInt a, ModInt const b) { return a += b; }\r",
            "\r",
            "    friend ModInt operator-(ModInt a, ModInt const b) { return a -= b; }\r",
            "\r",
            "    friend ModInt operator-(ModInt const a) { return 0 - a; }\r",
            "\r",
            "    friend ModInt operator*(ModInt a, ModInt const b) { return a *= b; }\r",
            "\r",
            "    friend ModInt operator/(ModInt a, ModInt const b) { return a /= b; }\r",
            "\r",
            "    friend ostream &operator<<(std::ostream &os, ModInt const &a) { return os << a.value; }\r",
            "\r",
            "    friend bool operator==(ModInt const &a, ModInt const &b) { return a.value == b.value; }\r",
            "\r",
            "    friend bool operator!=(ModInt const &a, ModInt const &b) { return a.value != b.value; }\r",
            "\r",
            "    ModInt &operator++() {\r",
            "        *this += 1;\r",
            "        return *this;\r",
            "    }\r",
            "\r",
            "    ModInt operator++(int) {\r",
            "        ModInt old = *this;\r",
            "        operator++();\r",
            "        return old;\r",
            "    }\r",
            "\r",
            "    ModInt &operator--() {\r",
            "        *this -= 1;\r",
            "        return *this;\r",
            "    }\r",
            "\r",
            "    ModInt operator--(int) {\r",
            "        ModInt old = *this;\r",
            "        operator--();\r",
            "        return old;\r",
            "    }\r",
            "\r",
            "    ModInt pow(long long e) const {\r",
            "        if (e < 0) return inv().pow(-e);\r",
            "        ModInt a = *this, res = 1;\r",
            "        while (e) {\r",
            "            if (e & 1) res *= a;\r",
            "            a *= a;\r",
            "            e >>= 1;\r",
            "        }\r",
            "        return res;\r",
            "    }\r",
            "\r",
            "    ModInt inv() const { return pow(MOD - 2); }\r",
            "};\r",
            "\r",
            "const int MOD = 1e9 + 7;\r",
            "\r",
            "typedef ModInt<MOD> mint;\r",
            "typedef vector<mint> vmi;\r",
            "typedef vector<vmi> vvmi;\r",
            ""
        ],
        "description": "ModInt"
    },
    "cp": {
        "prefix": "cp",
        "body": [
            "#include \"bits/stdc++.h\"\r",
            "\r",
            "#ifdef LOCAL\r",
            "\r",
            "#include \"templates/others/dbg.cpp\"\r",
            "\r",
            "#else\r",
            "#define dbg(...)\r",
            "#define dbgln(...)\r",
            "#endif\r",
            "\r",
            "using namespace std;\r",
            "\r",
            "typedef long long ll;\r",
            "typedef pair<int, int> pii;\r",
            "typedef pair<ll, ll> pll;\r",
            "typedef queue<int> qi;\r",
            "typedef vector<int> vi;\r",
            "typedef vector<vector<int>> vvi;\r",
            "typedef vector<ll> vll;\r",
            "typedef vector<vector<ll>> vvll;\r",
            "typedef vector<bool> vb;\r",
            "typedef vector<vector<bool>> vvb;\r",
            "typedef vector<pii> vpii;\r",
            "typedef vector<pll> vpll;\r",
            "typedef vector<vector<pll>> vvpll;\r",
            "typedef vector<char> vc;\r",
            "typedef vector<vector<char>> vvc;\r",
            "typedef vector<string> vs;\r",
            "typedef set<int> si;\r",
            "typedef set<ll> sll;\r",
            "typedef map<int, int> mii;\r",
            "typedef map<ll, ll> mll;\r",
            "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)\r",
            "#define endl '\\n'\r",
            "#define all(a) a.begin(), a.end()\r",
            "#define yes \"YES\"\r",
            "#define no \"NO\"\r",
            "#define spc ' '\r",
            "#define INF INT_MAX\r",
            "#define LLINF LONG_LONG_MAX\r",
            "#define NINF INT_MIN\r",
            "#define LLNINF LONG_LONG_MIN\r",
            "#define pb push_back\r",
            "#define pf push_front\r",
            "#define eb emplace_back\r",
            "#define F first\r",
            "#define S second\r",
            "#define cin(a) \\\r",
            "    for (auto &_x : (a)) cin >> _x\r",
            "#define cin2(a)          \\\r",
            "    for (auto &_x : (a)) \\\r",
            "        for (auto &__x : _x) cin >> __x\r",
            "#define cout(a) \\\r",
            "    for (auto &_x : (a)) cout << _x << spc\r",
            "#define len(l, r) ((r) - (l) + 1)\r",
            "#define mid(l, r) ((l) + ((r) - (l)) / 2)\r",
            "#define ceil(a, b) (!(a) ? 0 : ((a)-1) / (b) + 1)\r",
            "#define yn(b) ((b) ? yes : no)\r",
            "#define between(x, l, r) ((x) >= (l) && (x) <= (r))\r",
            "#define between2(i, j, n, m) (between(i, 0, n - 1) && between(j, 0, m - 1))\r",
            "\r",
            "void solve() {\r",
            "}\r",
            "\r",
            "#define MULTI\r",
            "\r",
            "int main() {\r",
            "    fast;\r",
            "    int t = 1;\r",
            "#ifdef MULTI\r",
            "    cin >> t;\r",
            "#endif\r",
            "    for (int i = 1; i <= t; ++i) {\r",
            "        solve();\r",
            "        i != t &&cout << endl;\r",
            "    }\r",
            "}\r",
            "/*\r",
            "\r",
            "\r",
            "\r",
            " */"
        ],
        "description": "cp"
    },
    "vdir": {
        "prefix": "vdir",
        "body": [
            "vpii dir = {",
            "    {0, 1},",
            "    {0, -1},",
            "    {1, 0},",
            "    {-1, 0},",
            "};",
            ""
        ],
        "description": "vdir"
    },
    "UF": {
        "prefix": "UF",
        "body": [
            "struct UF {\r",
            "   private:\r",
            "    vi p, size;\r",
            "    int cc;\r",
            "\r",
            "   public:\r",
            "    UF(int n) {\r",
            "        p = vi(n);\r",
            "        size = vi(n, 1);\r",
            "        iota(all(p), 0);\r",
            "        cc = n;\r",
            "    }\r",
            "\r",
            "    int find(int u) {\r",
            "        return p[u] == u ? u : p[u] = find(p[u]);\r",
            "    }\r",
            "\r",
            "    bool join(int u, int v) {\r",
            "        u = find(u), v = find(v);\r",
            "        if (u == v) return false;\r",
            "        if (size[u] < size[v]) swap(u, v);\r",
            "        p[v] = u;\r",
            "        size[u] += size[v];\r",
            "        --cc;\r",
            "        return true;\r",
            "    }\r",
            "\r",
            "    bool connected(int u, int v) {\r",
            "        return find(u) == find(v);\r",
            "    }\r",
            "\r",
            "    int getSize(int u) {\r",
            "        return size[find(u)];\r",
            "    }\r",
            "\r",
            "    int getCC() const {\r",
            "        return cc;\r",
            "    }\r",
            "};\r",
            ""
        ],
        "description": "UF"
    },
    "RollbackUF": {
        "prefix": "RollbackUF",
        "body": [
            "struct RollbackUF {\r",
            "   private:\r",
            "    vector<int> data;\r",
            "    stack<pair<int, int>> history;\r",
            "    int cc;\r",
            "\r",
            "    void snapshot(int u, int v) {\r",
            "        history.emplace(u, data[u]);\r",
            "        history.emplace(v, data[v]);\r",
            "        history.emplace(-1, cc);\r",
            "    }\r",
            "\r",
            "   public:\r",
            "    RollbackUF(int n) {\r",
            "        data.assign(n, -1);\r",
            "        cc = n;\r",
            "    }\r",
            "\r",
            "    int find(int u) {\r",
            "        return data[u] < 0 ? u : find(data[u]);\r",
            "    }\r",
            "\r",
            "    bool join(int u, int v) {\r",
            "        u = find(u), v = find(v);\r",
            "        if (u == v) return false;\r",
            "        snapshot(u, v);\r",
            "        if (data[u] > data[v]) swap(u, v);\r",
            "        data[u] += data[v];\r",
            "        data[v] = u;\r",
            "        --cc;\r",
            "        return true;\r",
            "    }\r",
            "\r",
            "    bool connected(int u, int v) { return find(u) == find(v); }\r",
            "\r",
            "    int getSize(int u) { return (-data[find(u)]); }\r",
            "\r",
            "    int getCC() { return cc; }\r",
            "\r",
            "    void undo() {\r",
            "        cc = history.top().second;\r",
            "        history.pop();\r",
            "        data[history.top().first] = history.top().second;\r",
            "        history.pop();\r",
            "        data[history.top().first] = history.top().second;\r",
            "        history.pop();\r",
            "    }\r",
            "};\r",
            ""
        ],
        "description": "Rollback Union Find"
},   
    "FT": {
        "prefix": "FT",
        "body": [
            "template <class T = int>\r",
            "struct FT {\r",
            "    int n;\r",
            "    vector<T> t;\r",
            "\r",
            "    FT(int n) {\r",
            "        this->n = n + 1;\r",
            "        t.resize(n + 1);\r",
            "    }\r",
            "\r",
            "    FT(vector<T> &a) : FT(a.size()) {\r",
            "        for (int i = 1; i <= a.size(); ++i) {\r",
            "            t[i] += a[i - 1];\r",
            "            int j = i + (i & -i);\r",
            "            if (j < n + 1) t[j] += t[i];\r",
            "        }\r",
            "    }\r",
            "\r",
            "    void add(int i, T x) {\r",
            "        for (++i; i < n; i += i & -i) t[i] += x;\r",
            "    }\r",
            "\r",
            "    int sum(int l, int r) {\r",
            "        return sum(r) - sum(l - 1);\r",
            "    }\r",
            "\r",
            "    int sum(int i) {\r",
            "        T res = 0;\r",
            "        for (++i; i; i -= i & -i) res += t[i];\r",
            "        return res;\r",
            "    }\r",
            "};\r",
            ""
        ],
        "description": "FT"
    },
    "FT2D": {
        "prefix": "FT2D",
        "body": [
            "template <class T = int>\r",
            "struct FT2D {\r",
            "    int n, m;\r",
            "    vector<vector<T>> t;\r",
            "\r",
            "    FT2D(int n, int m) {\r",
            "        this->n = n + 1;\r",
            "        this->m = m + 1;\r",
            "        t.resize(n + 1, vector<T>(m + 1));\r",
            "    }\r",
            "\r",
            "    FT2D(vector<vector<T>> &a) : FT2D(a.size(), a.front().size()) {\r",
            "        for (int i = 0; i < a.size(); ++i) {\r",
            "            for (int j = 0; j < a.front().size(); ++j) {\r",
            "                add(i, j, a[i][j]);\r",
            "            }\r",
            "        }\r",
            "    }\r",
            "\r",
            "    void add(int x, int y, T v) {\r",
            "        for (int i = x + 1; i < n; i += i & -i) {\r",
            "            for (int j = y + 1; j < m; j += j & -j) {\r",
            "                t[i][j] += v;\r",
            "            }\r",
            "        }\r",
            "    }\r",
            "\r",
            "    //          top left        bottom right\r",
            "    int sum(int x1, int y1, int x2, int y2) {\r",
            "        return sum(x2, y2) + sum(x1 - 1, y1 - 1) -\r",
            "               sum(x1 - 1, y2) - sum(x2, y1 - 1);\r",
            "    }\r",
            "\r",
            "    int sum(int x, int y) {\r",
            "        T res = 0;\r",
            "        for (int i = x + 1; i; i -= i & -i) {\r",
            "            for (int j = y + 1; j; j -= j & -j) {\r",
            "                res += t[i][j];\r",
            "            }\r",
            "        }\r",
            "        return res;\r",
            "    }\r",
            "};\r",
            ""
        ],
        "description": "FT2D"
    }
}